name: 🚀 Production Deployment Pipeline

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: sipbrewery

jobs:
  # 🧪 Testing Phase
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Backend Dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: 📦 Install Frontend Dependencies
        run: |
          cd ../sipbrewery-frontend
          npm ci

      - name: 🔍 Run Linting
        run: |
          npm run lint
          cd ../sipbrewery-frontend
          npm run lint

      - name: 🧪 Run Backend Tests
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/sipbrewery_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
        run: npm test

      - name: 🧪 Run Frontend Tests
        run: |
          cd ../sipbrewery-frontend
          npm test

      - name: 📊 Generate Test Coverage
        run: |
          npm run test:coverage
          cd ../sipbrewery-frontend
          npm run test:coverage

      - name: 📈 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,../sipbrewery-frontend/coverage/lcov.info

  # 🔒 Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Dependency Vulnerability Scan
        run: |
          npm audit --audit-level moderate
          cd ../sipbrewery-frontend
          npm audit --audit-level moderate

      - name: 🛡️ Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🔐 Run Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # 🏗️ Build Phase
  build:
    name: 🏗️ Build Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Backend Metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏷️ Extract Frontend Metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 🏗️ Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ../sipbrewery-frontend
          file: ../sipbrewery-frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🎯 Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name sipbrewery-staging

      - name: 🚀 Deploy to Staging
        run: |
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/sipbrewery-backend -n staging
          kubectl rollout status deployment/sipbrewery-frontend -n staging
        env:
          BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}

      - name: 🧪 Run Staging Health Checks
        run: |
          kubectl wait --for=condition=ready pod -l app=sipbrewery-backend -n staging --timeout=300s
          kubectl wait --for=condition=ready pod -l app=sipbrewery-frontend -n staging --timeout=300s

      - name: 🔍 Run Integration Tests
        run: |
          npm run test:integration:staging
        env:
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}

  # 🏭 Deploy to Production
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/production'
    environment: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🎯 Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name sipbrewery-production

      - name: 📊 Pre-deployment Health Check
        run: |
          kubectl get pods -n production
          kubectl top nodes

      - name: 🚀 Blue-Green Deployment
        run: |
          # Deploy to green environment
          envsubst < k8s/production/deployment-green.yaml | kubectl apply -f -
          kubectl rollout status deployment/sipbrewery-backend-green -n production
          kubectl rollout status deployment/sipbrewery-frontend-green -n production
          
          # Health check green environment
          kubectl wait --for=condition=ready pod -l app=sipbrewery-backend,version=green -n production --timeout=600s
          
          # Switch traffic to green
          kubectl patch service sipbrewery-backend -n production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service sipbrewery-frontend -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify
          sleep 30
          
          # Cleanup old blue deployment
          kubectl delete deployment sipbrewery-backend-blue -n production --ignore-not-found
          kubectl delete deployment sipbrewery-frontend-blue -n production --ignore-not-found
          
          # Rename green to blue for next deployment
          kubectl patch deployment sipbrewery-backend-green -n production -p '{"metadata":{"name":"sipbrewery-backend-blue"}}'
          kubectl patch deployment sipbrewery-frontend-green -n production -p '{"metadata":{"name":"sipbrewery-frontend-blue"}}'
        env:
          BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}

      - name: 🧪 Production Health Checks
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Health check endpoints
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_API_URL }}/ready || exit 1
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health/asi || exit 1

      - name: 📊 Post-deployment Monitoring
        run: |
          # Trigger monitoring alerts
          curl -X POST ${{ secrets.MONITORING_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{"text":"🚀 SIP Brewery Production Deployment Successful","deployment":"production","version":"${{ github.sha }}"}'

      - name: 📈 Performance Tests
        run: |
          npm run test:performance:production
        env:
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}

  # 📊 Monitoring & Alerts
  post-deploy:
    name: 📊 Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 📊 Update Deployment Metrics
        run: |
          curl -X POST ${{ secrets.METRICS_ENDPOINT }} \
            -H "Authorization: Bearer ${{ secrets.METRICS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment_id": "${{ github.run_id }}",
              "commit_sha": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "status": "${{ job.status }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }'

      - name: 🔔 Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "🚀 SIP Brewery Deployment",
              "attachments": [{
                "color": "${{ job.status }}" === "success" ? "good" : "danger",
                "fields": [{
                  "title": "Status",
                  "value": "${{ job.status }}",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }]
              }]
            }

      - name: 📧 Email Notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 SIP Brewery Deployment Failed"
          body: |
            Deployment failed for commit ${{ github.sha }}
            
            Branch: ${{ github.ref_name }}
            Workflow: ${{ github.workflow }}
            Run ID: ${{ github.run_id }}
            
            Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: SIP Brewery CI/CD
