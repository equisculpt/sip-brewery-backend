# ðŸš€ SIP BREWERY - PRODUCTION DOCKER COMPOSE
# Complete production-ready stack with all services

version: '3.8'

services:
  # ===== BACKEND SERVICE =====
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sipbrewery-backend
    restart: unless-stopped
    ports:
      - "3001:3000"
      - "8001:8001"  # Python ASI Bridge
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/sipbrewery
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app/python-asi
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - backend_cache:/app/cache
    depends_on:
      - mongo
      - redis
    networks:
      - sipbrewery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== FRONTEND SERVICE =====
  frontend:
    build:
      context: ../sipbrewery-frontend
      dockerfile: Dockerfile
      target: runner
    container_name: sipbrewery-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3000
      - NEXT_PUBLIC_WS_URL=ws://backend:3000/ws
      - NEXT_PUBLIC_ASI_API_BASE=http://backend:3000/api/unified-asi
    depends_on:
      - backend
    networks:
      - sipbrewery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== MONGODB DATABASE =====
  mongo:
    image: mongo:7.0
    container_name: sipbrewery-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=sipbrewery2024!
      - MONGO_INITDB_DATABASE=sipbrewery
    volumes:
      - mongo_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - sipbrewery-network
    command: mongod --auth --bind_ip_all

  # ===== REDIS CACHE =====
  redis:
    image: redis:7.2-alpine
    container_name: sipbrewery-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass sipbrewery2024! --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - sipbrewery-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== NGINX REVERSE PROXY =====
  nginx:
    image: nginx:alpine
    container_name: sipbrewery-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - sipbrewery-network

  # ===== MONITORING STACK =====
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sipbrewery-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sipbrewery-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sipbrewery-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sipbrewery2024!
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - sipbrewery-network

  # ElasticSearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sipbrewery-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sipbrewery-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sipbrewery-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - sipbrewery-network

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: sipbrewery-logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - sipbrewery-network

# ===== VOLUMES =====
volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

# ===== NETWORKS =====
networks:
  sipbrewery-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
